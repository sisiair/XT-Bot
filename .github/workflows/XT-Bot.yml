name: XT-Bot

on:
  workflow_dispatch:      # 允许手动触发
  schedule:
    - cron: '0 8 * * *'  # 北京时间早上6点，到晚上22点，每3小时执行一次

jobs:
  auto-process:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}  # 使用你设置的 secret
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          # 使用GH_TOKEN配置认证以解决403权限问题
          git remote set-url origin https://${{ secrets.GH_TOKEN }}@github.com/sisiair/XT-Bot.git

      - name: Create directories
        run: |
          mkdir -p Python/{dataBase,downloads,logs,output}
          mkdir -p TypeScript/{data,logs,resp,tweets}

      - name: Verify secrets
        run: |
          # 检查关键secrets是否设置（不输出实际值，只显示是否存在和长度）
          if [ -n "${{ secrets.AUTH_TOKEN }}" ]; then
            echo "✅ AUTH_TOKEN已设置，长度: ${#AUTH_TOKEN}"
          else
            echo "❌ 错误: AUTH_TOKEN未设置或为空"
          fi
          
          if [ -n "${{ secrets.SCREEN_NAME }}" ]; then
            echo "✅ SCREEN_NAME已设置: ${{ secrets.SCREEN_NAME }}"
          else
            echo "❌ 错误: SCREEN_NAME未设置或为空"
          fi

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Bun dependencies
        run: |
          cd TypeScript
          bun install

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          cd Python
          pip install -r requirements.txt

      - name: Run fetch script
        env:
          AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
          SCREEN_NAME: ${{ secrets.SCREEN_NAME }}
        run: |
          # 再次验证环境变量是否正确设置
          echo "AUTH_TOKEN存在: $([[ -n \"$AUTH_TOKEN\" ]] && echo '是' || echo '否')"
          echo "AUTH_TOKEN长度: ${#AUTH_TOKEN}"
          echo "SCREEN_NAME: $SCREEN_NAME"
          
          cd TypeScript/scripts
          echo "尝试运行fetch-following.ts..."
          bun run fetch-following.ts || echo "⚠️ 警告：获取关注列表失败，但继续执行工作流"
          echo "尝试运行fetch-home-latest-timeline.ts..."
          bun run fetch-home-latest-timeline.ts || echo "⚠️ 警告：获取时间线失败，但继续执行工作流"

      - name: Run X-Bot.py
        run: |
          cd Python/src
          python X-Bot.py || echo "⚠️ 警告：X-Bot.py执行失败，但继续执行工作流"

      - name: Run T-Bot.py
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
          LARK_KEY: ${{ secrets.LARK_KEY }}
        run: |
          cd Python/src
          python T-Bot.py || echo "⚠️ 警告：T-Bot.py执行失败，但继续执行工作流"

      - name: Upload Response Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: network-responses-${{ github.run_id }}  # 唯一标识
          path: |
            Python/logs/
            TypeScript/logs/
            TypeScript/resp/
          retention-days: 7  # 自动清理

      - name: Commit and push changes
        run: |
          # 确保最新代码
          git pull origin main || echo "拉取最新代码失败，但继续执行"
          git add Python/dataBase Python/output TypeScript/data TypeScript/tweets
          git commit -m "chore: update user data [skip ci]" || echo "没有变更需要提交"
          # 使用配置的远程地址推送（已在Setup Git步骤中设置了带认证的URL）
          git push -f origin main || echo "推送失败，但继续执行其他步骤"
